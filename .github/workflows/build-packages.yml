name: Build and Release Packages

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [ main ]

jobs:
  build-source:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev curl
          
      - name: Build binaries
        run: |
          # Build the binaries
          make clean
          make
          
      - name: Create source and build artifacts
        run: |
          mkdir -p dist
          
          # Create source tarball with proper naming for packages
          git archive --format=tar.gz --prefix=vios-binutils-${{ steps.version.outputs.version }}/ HEAD > dist/vios-binutils-${{ steps.version.outputs.version }}.tar.gz
          
          # Also create one with the GitHub repo name for compatibility
          git archive --format=tar.gz --prefix=ViOS-binutils-${{ steps.version.outputs.version }}/ HEAD > dist/ViOS-binutils-${{ steps.version.outputs.version }}.tar.gz
          
          # Create binaries archive
          tar -czf dist/vios-binutils-binaries-${{ steps.version.outputs.version }}.tar.gz i386-vios-elf-* ldscripts/
          
          # Ensure no ViOS libc archive is present
          rm -f dist/vios-libc-*.tar.gz
          
          # List files to verify
          echo "Files in dist directory:"
          ls -la dist/
          
      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: dist/

  build-deb:
    needs: build-source
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper devscripts fakeroot zlib1g-dev curl
          
      - name: Build Debian package
        run: |
          # Update version in changelog if this is a tagged release
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            sed -i "s/1.0.0-1/$VERSION-1/" debian/changelog
          fi
          
          # Build the package
          dpkg-buildpackage -us -uc -b
          
          # Move packages to dist directory
          mkdir -p dist
          mv ../vios-binutils_*.deb dist/
          
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: dist/

  build-arch:
    needs: build-source
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git curl zlib
          
      - name: Build Arch package
        run: |
          # Create build user (makepkg doesn't run as root)
          useradd -m builder
          chown -R builder:builder .
          
          # Update version in PKGBUILD if this is a tagged release
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            sed -i "s/pkgver=1.0.0/pkgver=$VERSION/" PKGBUILD
          fi
          
          # Build the package
          sudo -u builder makepkg --noconfirm
          
          # Move packages to dist directory
          mkdir -p dist
          mv *.pkg.tar.* dist/
          
      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: dist/

  test-build:
    needs: build-source
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev curl
          
      - name: Test build
        run: |
          make clean
          # Skip ViOS libc installation in CI
          mkdir -p /tmp/fake-vios/lib
          touch /tmp/fake-vios/lib/libViOSlibc.a
          make VIOS_PREFIX=/tmp/fake-vios
          
          # Check that all binaries were built
          ls -la i386-vios-elf-*
          ls -la ldscripts/
          
      - name: Test installation
        run: |
          # Test local installation with local prefix
          make install DESTDIR=/tmp/test-install PREFIX=/usr VIOS_PREFIX=/tmp/test-install/opt/ViOS
          
          # Check installed files
          ls -la /tmp/test-install/usr/bin/i386-vios-elf-*
          ls -la /tmp/test-install/usr/lib/ldscripts/
          
          # Check if ViOS libc was installed
          if [ -d "/tmp/test-install/opt/ViOS" ]; then
            echo "ViOS libc found in /tmp/test-install/opt/ViOS"
            ls -la /tmp/test-install/opt/ViOS/lib/
            ls -la /tmp/test-install/opt/ViOS/include/
          else
            echo "Warning: ViOS libc not found in /tmp/test-install/opt/ViOS"
          fi

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-source, build-deb, build-arch, test-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Prepare release files
        run: |
          mkdir -p release_files
          
          # Copy source files
          if [ -d "source" ]; then
            cp source/* release_files/ 2>/dev/null || true
          fi
          
          # Copy debian package
          if [ -d "debian-package" ]; then
            cp debian-package/* release_files/ 2>/dev/null || true
          fi
          
          # Copy arch package
          if [ -d "arch-package" ]; then
            cp arch-package/* release_files/ 2>/dev/null || true
          fi
          
          # Remove any unwanted files
          rm -f release_files/vios-libc-*.tar.gz
          
          # List final files
          echo "Files to be released:"
          ls -la release_files/
          
      - name: Delete existing release if it exists
        run: |
          # Delete existing release and tag if they exist
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "Deleting existing release ${{ github.ref_name }}"
            gh release delete ${{ github.ref_name }} --yes
          else
            echo "No existing release found for ${{ github.ref_name }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          generate_release_notes: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
